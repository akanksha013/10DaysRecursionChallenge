#include<bits/stdc++.h>
using namespace std;

void findCombs(unsigned int index , int target , vector<int> &arr, vector<int> &result, vector<vector<int>> &ans){

	/*
	Base Case to check if the target is equal to 0 then one of the subsequences is our answer
	and we push it into the ans data structure and terminate the recursive call.
	*/
	if(target == 0){
		ans.push_back(result);							
		return;  					
	}

        for (unsigned int i = index; i < arr.size(); i++) {
		
		/*if condition for avoiding duplicate combinations. (i>index) condititon to check that element is considered atleast once.
		  */
          if (i > index and arr[i] == arr[i - 1]) {
            continue; 
          }
		/*if the arr[i]>target then it implies that, that particular subsequence is not our answer & there is no point checking the 
		further since all the next elements are greater than arr[i]*/
          if (arr[i] > target) {
            break;
          }
		  //Current element is pushed into the arr data structure.	
          result.push_back(arr[i]);

          findCombs(i + 1, target-arr[i], arr, result, ans);
		  /* The elements are removed so that a new combination can be generated by back-tracking the recursive call. */
		  result.pop_back(); 
        }
}


vector<vector<int>> combinationSum2(vector<int> &arr, int target)
{

	sort(arr.begin(), arr.end());
	vector<int> ds;
	vector<vector<int>> res;

	findCombs(0, target, arr, ds, res);
	
	return res;
}

int main(){

    vector<int> v;
    int n;
    cout<<"Enter the size of the vector : ";
    cin>>n;

    cout<<"Enter the vector elements : ";

    for(int i=0;i<n;i++){
        int a;
        cin>>a;
        v.push_back(a);
    }

    int target;
    cout<<"Enter the target sum : ";
    cin>>target;

    vector<vector<int>> ans = combinationSum2(v,target);

    for(auto i : ans){
        for(auto j : i){
            cout<<j<<"   ";
        }
        cout<<endl;
    }
}